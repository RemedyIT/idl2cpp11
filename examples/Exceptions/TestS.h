// -*- C++ -*-
/*
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT
 *        Nijkerk, GLD
 *        The Netherlands
 *        http://www.remedy.nl \ http://www.theaceorb.nl
 */

#ifndef __RIDL_TESTS_H_INCLUDED__
#define __RIDL_TESTS_H_INCLUDED__

#include "TestC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/0x/portable_server/servantbase.h"

// generated from ServantHeaderWriter#enter_module
namespace Test {

  // generated from c++/srv_hdr/interface_pre.erb
  namespace POA
  {
    class Foo_srvproxy;
    typedef Foo_srvproxy* Foo_srvproxy_ptr;
  }

  class Foo_skel
    : public virtual corba_0x::PortableServer::Servant_skel
  {
  protected:
    Foo_skel (void);

    virtual Servant_proxy_ptr get_proxy ();

  public:
    /// Useful for template programming.
    typedef Test::Foo stub_type;
    typedef std::shared_ptr<Foo_skel> reference_type;

    reference_type _reference ();

    virtual ~Foo_skel (void);

    virtual bool _is_a (const std::string& logical_type_id);

    stub_type _this (void);

    virtual const std::string _interface_repository_id (void) const;

    // generated from c++/srv_hdr/operation.erb
    virtual void do_it (void) = 0;

    // generated from c++/srv_hdr/attribute.erb
    virtual int32_t a_number(void) = 0;

    // generated from c++/srv_hdr/attribute.erb
    virtual std::string a_string(void) = 0;
    virtual void a_string(const std::string& _v) = 0;

    // generated from c++/srv_hdr/operation.erb
    virtual void shutdown (void) = 0;

    // generated from c++/srv_hdr/interface_post.erb
  private:
    friend class POA::Foo_srvproxy;

    POA::Foo_srvproxy_ptr foo_srvproxy_;
  };

  template <typename T>
  class Foo_srvref
    : public virtual corba_0x::PortableServer::SrvRef_T<T>
  {
  public:
    explicit Foo_srvref (T *s = nullptr);
    Foo_srvref (const corba_0x::PortableServer::SrvRef_T<T>& o);
    operator corba_0x::PortableServer::Servant_ref <corba_0x::PortableServer::Servant_skel> ();
    void operator=(std::nullptr_t t);
  };
}; // namespace Test


#include "TestS.inl"

#endif // __RIDL_TESTS_H_INCLUDED__

// -*- END -*-
