// -*- C++ -*-
/*
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT
 *        Nijkerk, GLD
 *        The Netherlands
 *        http://www.remedy.nl \ http://www.theaceorb.nl
 */

#ifndef __RIDL_TESTC_H_INCLUDED__
#define __RIDL_TESTC_H_INCLUDED__

#include "ace/pre.h"

#include "tao/0x/stddef.h"
#include "tao/0x/corba.h"
#include "tao/0x/system_exception.h"
#include "tao/0x/orb.h"
#include "tao/0x/object_member_t.h"

using namespace corba_0x;

// generated from StubHeaderWriter#enter_module
namespace Test {

  // generated from StubHeaderWriter#visit_const
  constexpr char ch_val = 'a';

  // generated from StubHeaderWriter#visit_const
  constexpr wchar_t wch_val = L'X';

  // generated from StubHeaderWriter#visit_const
  constexpr uint8_t oct_val = 123;

  // generated from StubHeaderWriter#visit_const
  constexpr int16_t sh_val = -1023;

  // generated from StubHeaderWriter#visit_const
  constexpr uint16_t ush_val = 1023;

  // generated from StubHeaderWriter#visit_const
  constexpr int32_t l_val = -81234;

  // generated from StubHeaderWriter#visit_const
  constexpr uint32_t ul_val = 81234;

  // generated from StubHeaderWriter#visit_const
  constexpr int64_t ll_val = -12345678;

  // generated from StubHeaderWriter#visit_const
  constexpr uint64_t ull_val = 12345678;

  // generated from StubHeaderWriter#visit_const
  constexpr float f_val = 1.23;

  // generated from StubHeaderWriter#visit_const
  constexpr double d_val = 454.23;

  // generated from StubHeaderWriter#visit_const
  constexpr long double ld_val = 678.91;

  // generated from StubHeaderWriter#visit_const
  constexpr bool b_val = true;

  // generated from StubHeaderWriter#visit_const
  const std::string s_val = "text";

  // generated from StubHeaderWriter#visit_const
  const std::wstring ws_val = L"widestring\n \xbf \xfe0e";

  // generated from c++/cli_hdr/typedef.erb
  typedef int32_t TCounter;

  // generated from c++/cli_hdr/typedef.erb
  typedef std::string TName;

  // generated from StubHeaderWriter#visit_const
  constexpr TCounter count = 99;

  // generated from StubHeaderWriter#visit_const
  const TName name = "wilco";

  // generated from StubHeaderWriter#visit_const
  constexpr TCounter double_count = (Test::count * 2);
}; // namespace Test


// generated from StubHeaderWriter#enter_interface

// generated from c++/cli_hdr/interface_fwd.erb
#if !defined (_INTF_A_FWD_)
#define _INTF_A_FWD_
class A_stub;
class A_skel;
template <typename T> class A_ref;
template <typename T> class A_srvref;
typedef A_ref <A_stub> A;
class A_proxy;
typedef A_proxy* A_proxy_ptr;

struct A_traits
{
  typedef A_stub stub_type;
  typedef A ref_type;
  typedef ref_type* ptr_type;
  typedef const ref_type* const_ptr_type;
  typedef corba_0x::CORBA::ObjMember_T<A_traits, ref_type>  member_type;

  static ptr_type create (const_ptr_type copy_from = nullptr);
  static void destroy (ptr_type p);
  static void swap (ref_type& r1, ref_type& r2);
};
#endif // !_INTF_A_FWD_

// generated from c++/cli_hdr/interface_pre.erb
class A_stub
  : public virtual corba_0x::CORBA::Object_stub
{
public:
  friend class A_ref <A_stub>;

  virtual const std::string& _interface_repository_id () const;

  // generated from StubHeaderWriter#visit_const
  static constexpr float pi = 3.14159;

  // generated from c++/cli_hdr/interface_post.erb
  explicit A_stub (A_proxy_ptr p);
protected:
  A_stub (void);
  static A_stub* narrow (corba_0x::CORBA::Object_stub* obj);

private:
  A_stub(const A_stub&) = delete;
  A_stub& operator=(const A_stub&) = delete;
  A_proxy_ptr a_proxy_;
}; // A_stub


// generated from c++/cli_hdr/interface_objref.erb
template <typename T>
class A_ref : public corba_0x::CORBA::ObjRef_T<T>
{
public:
  explicit A_ref (T *s = nullptr);
  A_ref (std::shared_ptr <T> &t);
  template<typename _Tp1, typename = typename
    std::enable_if<std::is_convertible<typename _Tp1::ref_type*, T*>::value>::type>
    A_ref (_Tp1 obj) : corba_0x::CORBA::ObjRef_T<T> (obj.get()) {};
  void operator=(std::nullptr_t t);
  operator corba_0x::CORBA::Object_ref <corba_0x::CORBA::Object_stub> ();
  static A_ref<T> narrow(corba_0x::CORBA::Object obj);

  typedef A_srvref<A_skel> servant_type;
  typedef A_skel servant_base_type;

  // generated from StubHeaderObjrefWriter#visit_const
  static constexpr float pi = T::pi;
};

// generated from StubHeaderStdWriter#pre_visit
namespace std {
}; // std

#include "TestC.inl"

#if defined (__TAO_0X_INCLUDE_STUB_PROXY__)
#include "TestP.h"
#endif

#include "ace/post.h"

#endif // __RIDL_TESTC_H_INCLUDED__

// -*- END -*-
