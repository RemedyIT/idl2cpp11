/**
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT Expertise BV
 *        The Netherlands
 *        https://www.remedy.nl
 */

#ifndef __RIDL_TESTC_H_CIBFDGJG_INCLUDED__
#define __RIDL_TESTC_H_CIBFDGJG_INCLUDED__

#pragma once

#include /**/ "ace/pre.h"
#include "tao/x11/stddef.h"
#include "tao/x11/basic_traits.h"
#include "tao/x11/corba.h"
#include "tao/x11/system_exception.h"
#include "tao/x11/orb.h"
#include "tao/x11/corba_ostream.h"

#include /**/ "tao/x11/versionx11.h"

#if TAOX11_MAJOR_VERSION != 1 || TAOX11_MINOR_VERSION != 9 || TAOX11_MICRO_VERSION != 0
#error This file was generated with another RIDL C++11 backend version (1.9.0). Please re-generate.
#endif

using namespace TAOX11_NAMESPACE;

// generated from c++11/templates/cli/hdr/bitset
/// @copydoc test.idl::MyBitset
/// @todo THIS MAPPING IS NOT COMPLETE
class MyBitset
{
public:
  MyBitset () = default;
  ~MyBitset () noexcept = default;
  MyBitset (const MyBitset&) = default;
  MyBitset (MyBitset&&) = default;
  MyBitset& operator= (const MyBitset&) = default;
  MyBitset& operator= (MyBitset&&) = default;

  inline void x (bool _x11_x) { this->_taox11_mybitset.x = _x11_x; }
  inline bool x () const { return this->_taox11_mybitset.x; }
  inline void a (int8_t _x11_a) { this->_taox11_mybitset.a = _x11_a; }
  inline int8_t a () const { return this->_taox11_mybitset.a; }
  inline void d (int16_t _x11_d) { this->_taox11_mybitset.d = _x11_d; }
  inline int16_t d () const { return this->_taox11_mybitset.d; }
  inline void tt (int64_t _x11_tt) { this->_taox11_mybitset.tt = _x11_tt; }
  inline int64_t tt () const { return this->_taox11_mybitset.tt; }

private:
  struct
  {
    /// @copydoc #{bitfield.doc_scoped_name}::#{bitfield.name}
    bool x : 1;
    /// @copydoc #{bitfield.doc_scoped_name}::#{bitfield.name}
    int8_t a : 3;
    /// @copydoc #{bitfield.doc_scoped_name}::#{bitfield.name}
    int16_t d : 12;
    /// @copydoc #{bitfield.doc_scoped_name}::#{bitfield.name}
    int64_t tt : 33;
  } _taox11_mybitset;
}; // MyBitset


// generated from c++11/templates/cli/hdr/bitset
/// @copydoc test.idl::MyBitset2
/// @todo THIS MAPPING IS NOT COMPLETE
class MyBitset2
{
public:
  MyBitset2 () = default;
  ~MyBitset2 () noexcept = default;
  MyBitset2 (const MyBitset2&) = default;
  MyBitset2 (MyBitset2&&) = default;
  MyBitset2& operator= (const MyBitset2&) = default;
  MyBitset2& operator= (MyBitset2&&) = default;

  inline void c (int8_t _x11_c) { this->_taox11_mybitset2.c = _x11_c; }
  inline int8_t c () const { return this->_taox11_mybitset2.c; }

private:
  struct
  {
    /// @copydoc #{bitfield.doc_scoped_name}::#{bitfield.name}
    int8_t c : 3;
    /// @copydoc #{bitfield.doc_scoped_name}::#{bitfield.name}
    int8_t  : 2;
  } _taox11_mybitset2;
}; // MyBitset2


// generated from StubHeaderIDLTraitsWriter#pre_visit
namespace TAOX11_NAMESPACE
{
  namespace IDL
  {
  } // namespace IDL
} // namespace TAOX11_NAMESPACE

// generated from StubHeaderIDLTraitsDefWriter#pre_visit
namespace TAOX11_NAMESPACE
{
  namespace IDL
  {
  } // namespace IDL
} // namespace TAOX11_NAMESPACE

// generated from c++11/templates/cli/hdr/post
#if defined (__TAOX11_INCLUDE_STUB_PROXY__)
#include "testCP.h"
#endif

#include /**/ "ace/post.h"

#endif /* __RIDL_TESTC_H_CIBFDGJG_INCLUDED__ */

// -*- END -*-
