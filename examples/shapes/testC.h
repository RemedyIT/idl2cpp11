// -*- C++ -*-
/*
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT
 *        Nijkerk, GLD
 *        The Netherlands
 *        http://www.remedy.nl \ http://www.theaceorb.nl
 */

#ifndef __RIDL_TESTC_H_INCLUDED__
#define __RIDL_TESTC_H_INCLUDED__

#include /**/ "ace/pre.h"

#include "tao/x11/stddef.h"
#include "tao/x11/corba.h"
#include "tao/x11/system_exception.h"
#include "tao/x11/orb.h"

using namespace TAOX11_NAMESPACE;

// generated from c++/cli_hdr/struct_pre.erb
class ShapeType
{
public:

  // generated from c++/cli_hdr/struct_post.erb
  ShapeType (void);
  ~ShapeType (void) = default;
  ShapeType (const ShapeType&) = default;
  ShapeType (ShapeType&&) = default;
  explicit ShapeType (std::string color,
                      int32_t x,
                      int32_t y,
                      int32_t shapesize);
  ShapeType& operator= (const ShapeType& x);
  ShapeType& operator= (ShapeType&& x);

  void color (const std::string& _color);
  void color (std::string&& _color);
  const std::string& color (void) const;
  std::string& color (void);

  void x (int32_t _x);
  int32_t x (void) const;
  int32_t& x (void);

  void y (int32_t _y);
  int32_t y (void) const;
  int32_t& y (void);

  void shapesize (int32_t _shapesize);
  int32_t shapesize (void) const;
  int32_t& shapesize (void);

  void swap (ShapeType& s);

private:
  std::string color_;
  int32_t x_;
  int32_t y_;
  int32_t shapesize_;
}; // ShapeType

// generated from c++/cli_hdr/struct_pre.erb
class Attributes
{
public:

  // generated from c++/cli_hdr/struct_post.erb
  Attributes (void);
  ~Attributes (void) = default;
  Attributes (const Attributes&) = default;
  Attributes (Attributes&&) = default;
  explicit Attributes (std::string shape,
                       std::string color,
                       float speed);
  Attributes& operator= (const Attributes& x);
  Attributes& operator= (Attributes&& x);

  void shape (const std::string& _shape);
  void shape (std::string&& _shape);
  const std::string& shape (void) const;
  std::string& shape (void);

  void color (const std::string& _color);
  void color (std::string&& _color);
  const std::string& color (void) const;
  std::string& color (void);

  void speed (float _speed);
  float speed (void) const;
  float& speed (void);

  void swap (Attributes& s);

private:
  std::string shape_;
  std::string color_;
  float speed_;
}; // Attributes

// generated from c++/cli_hdr/typedef.erb
typedef std::vector < ::ShapeType> ShapeTypeSeq;

// generated from StubHeaderStdWriter#pre_visit
namespace std {

  // generated from c++/cli_hdr/struct_std.erb
  template <>
  void swap (::ShapeType& m1, ::ShapeType& m2);

  // generated from c++/cli_hdr/struct_std.erb
  template <>
  void swap (::Attributes& m1, ::Attributes& m2);
}; // std

// generated from c++/cli_hdr/inline.erb
#include "testC.inl"

// generated from StubHeaderStdWriter#pre_visit
namespace std {

  // generated from c++/cli_hdr/struct_std.erb
  template <>
  inline void swap (::ShapeType& m1, ::ShapeType& m2)
  {
    m1.swap (m2);
  }

  // generated from c++/cli_hdr/struct_std.erb
  template <>
  inline void swap (::Attributes& m1, ::Attributes& m2)
  {
    m1.swap (m2);
  }
}; // std

// generated from c++/cli_hdr/post.erb
#if defined (__TAOX11_INCLUDE_STUB_PROXY__)
#include "testP.h"
#endif

#include /**/ "ace/post.h"

#endif // __RIDL_TESTC_H_INCLUDED__

// -*- END -*-
