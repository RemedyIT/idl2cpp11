// -*- C++ -*-
/*
 * ****  Code generated by the RIDL Compiler ****
 * RIDL has been developed by:
 *        Remedy IT
 *        Nijkerk, GLD
 *        The Netherlands
 *        http://www.remedy.nl \ http://www.theaceorb.nl
 */

#ifndef __RIDL_TESTS_H_INCLUDED__
#define __RIDL_TESTS_H_INCLUDED__

#include "testC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/x11/portable_server/servantbase.h"

// generated from ServantHeaderWriter#enter_module
namespace Test
{

  // generated from c++/srv_hdr/interface_pre.erb
  namespace POA
  {
    class Hello_srvproxy;
    typedef Hello_srvproxy* Hello_srvproxy_ptr;

    class Hello
      : public virtual TAOX11_NAMESPACE::PortableServer::Servant
    {
    public:
      typedef TAOX11_CORBA::servant_traits< Hello>    _traits_type;
      typedef TAOX11_CORBA::servant_reference< Hello>   _ref_type;
      typedef typename _ref_type::shared_ptr_type   _shared_type;

    protected:
      Hello (void);
      Hello (bool); // for inheritance chains
      virtual ~Hello (void);

      virtual Servant_proxy_ptr get_proxy ();

      _shared_type _reference ();

      friend class TAOX11_CORBA::servant_reference< Hello>;
    public:

      virtual bool _is_a (const std::string& logical_type_id);

      TAOX11_CORBA::object_reference< ::Test::Hello> _this (void);

      virtual const std::string _interface_repository_id (void) const;

      // generated from c++/srv_hdr/operation.erb
      virtual std::string get_string (void) = 0;

      // generated from c++/srv_hdr/operation.erb
      virtual void shutdown (void) = 0;

      // generated from c++/srv_hdr/interface_post.erb
    private:
      friend class POA::Hello_srvproxy;

      POA::Hello_srvproxy_ptr hello_srvproxy_;
    };

  }; // POA
}; // namespace Test


// generated from ServantHeaderSrvTraitsWriter#pre_visit
namespace TAOX11_NAMESPACE {
  namespace CORBA {

    // generated from c++/srv_hdr/interface_servant_traits.erb
    template <>
    struct servant_traits< ::Test::Hello>
    {
      typedef ::Test::POA::Hello             base_type;
      typedef ::Test::POA::Hello::_ref_type  ref_type;
      template <typename _Tp1, typename = typename
          std::enable_if<std::is_convertible< ::Test::POA::Hello*, _Tp1*>::value>::type>
      static ref_type downcast (const servant_reference<_Tp1>& base)
      {
        return ref_type (std::dynamic_pointer_cast< ::Test::POA::Hello> (base.get_shared ()));
      }
    };
  }; // CORBA
}; // TAOX11_NAMESPACE

#include "testS.inl"

#endif // __RIDL_TESTS_H_INCLUDED__

// -*- END -*-
