# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.map_p_gen_idl
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.map_p_gen_idl
DEPENDENCY_FILE  = .depend.map_p_gen_idl

IDL_DEPENDENCY_FILE1 = .depend.map_p_gen_idl_Idl1

IDL_DEPENDENCY_FILES += \
	.depend.map_p_gen_idl_Idl1

LIB_PREFIX      ?= lib

FILES = \

IDL_DEPS_FLAGS1 = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAOX11_ROOT) $(RIDLCFLAGS) -Sci -Ssi -Sa -St -DGEN_IDL_MAKE_DEPS -Gos --idl-version=4
IDL_DEPS1 = test.idl



LIBPATHS := . "$(X11_BASE_ROOT)/lib"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
taox11_build?=1


PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAOX11_ROOT)/tao/rules.taox11.GNU

include $(TAO_ROOT)/rules.tao.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/map_p_gen_idl
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifeq ($(taox11_build),1)
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif
else
  all: require_warning
endif

ifeq ($(taox11_build),1)
else
  all: require_warning
endif

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(X11_BASE_ROOT)/lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(X11_BASE_ROOT)/lib $(if $(ARCH),-L$(X11_BASE_ROOT)/lib/$(ARCH))
endif
CPPFLAGS     += -I$(TAOX11_ROOT)

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
.PHONY: lib_warning
lib_warning:
	@echo map_p_gen_idl will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(taox11_build),1)
requires_disabled_macros += taox11_build
endif
.PHONY: require_warning
require_warning:
	@echo map_p_gen_idl will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
export PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += testS.cpp testC.cpp testC.h testSP.h testCP.h testS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "test.idl" -nt "testS.cpp" 2> /dev/null || $(TEST_EXE) "test.idl" -nt "testC.cpp" 2> /dev/null || $(TEST_EXE) "test.idl" -nt "testC.h" 2> /dev/null || $(TEST_EXE) "test.idl" -nt "testSP.h" 2> /dev/null || $(TEST_EXE) "test.idl" -nt "testCP.h" 2> /dev/null || $(TEST_EXE) "test.idl" -nt "testS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
testS.cpp testC.cpp testC.h testSP.h testCP.h testS.h: test.idl
	$(if $(findstring ",$(X11_BASE_ROOT)/bin/ridlc),$(X11_BASE_ROOT)/bin/ridlc,$(call ADD_QUOTE,$(call ADD_ARCH,$(X11_BASE_ROOT)/bin/ridlc))) -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAOX11_ROOT) $(RIDLCFLAGS) -Sci -Ssi -Sa -St -DGEN_IDL_MAKE_DEPS -Gos --idl-version=4 test.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
ifeq ($(taox11_build),1)
all: $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += $(GENERATED_DIRTY)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

incremental_depend_idl::
	@$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old
	@cp $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old
	$(DEPGEN_ENV) $(DEPGEN) -A $(DEPEND_CMD_ARGS) -f $(IDL_DEPENDENCY_FILE1) \
	$(IDL_DEPS_FLAGS1) -t gnuidl -DMAKEDEPEND $(IDL_DEPS1)
	@if cmp -s $(IDL_DEPENDENCY_FILE1) $(IDL_DEPENDENCY_FILE1)_idl.old ;\
	then echo "GNUmakefile idl dependencies unchanged for $(IDL_DEPS1)." ;\
	else \
		echo "GNUmakefile idl dependencies updated for $(IDL_DEPS1)." ;\
	fi ;\
	$(RM) $(IDL_DEPENDENCY_FILE1)_idl.old ;

realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(filter-out $(PRECIOUS_FILES),$(GENERATED_DIRTY))
endif

__prebuild__:
ifeq ($(taox11_build),1)
	@-:
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LD_RPATH ?= -Wl,-rpath,
LDFLAGS += $(LD_RPATH)$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif


